var JFrogEvidenceOperations = Class.create();
JFrogEvidenceOperations.prototype = {
    initialize: function() {
		this.base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		this.CryptoJS = x_1560608_jfrog_1.CryptoJS;
	},
	GetBase64EncodedStr: function(str) {
		let result = "";
		let i = 0;

		while (i < str.length) {
			const char1 = str.charCodeAt(i++) || 0;
			const char2 = str.charCodeAt(i++) || NaN; // Use NaN for missing characters
			const char3 = str.charCodeAt(i++) || NaN;

			const enc1 = char1 >> 2;
			const enc2 = ((char1 & 3) << 4) | (isNaN(char2) ? 0 : char2 >> 4);
			const enc3 = isNaN(char2) ? 64 : ((char2 & 15) << 2) | (isNaN(char3) ? 0 : char3 >> 6);
			const enc4 = isNaN(char3) ? 64 : (char3 & 63);

			result += this.base64Chars.charAt(enc1) +
					this.base64Chars.charAt(enc2) +
					this.base64Chars.charAt(enc3) +
					this.base64Chars.charAt(enc4);
		}

		return result;
    },
	HexToBase64: function(hexstring){
		// clean hex
		input = hexstring.toUpperCase();
        var orig_input = hexstring;
        cleaned_hex = input.replace(/[^A-Fa-f0-9]/g, "");
        //if (orig_input != input)
        //   return ("Warning! Non-hex characters in input string ignored.");
		var binary = new Array();
        for (var index=0; index<cleaned_hex.length/2; index++) {
          var h = cleaned_hex.substr(index*2, 2);
          binary[index] = parseInt(h,16);
        }
		var ret = new Array();
		var i = 0;
		var j = 0;
		var char_array_3 = new Array(3);
		var char_array_4 = new Array(4);
		var in_len = binary.length;
		var pos = 0;

		while (in_len--)
		{
			char_array_3[i++] = binary[pos++];
			if (i == 3)
			{
				char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
				char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
				char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
				char_array_4[3] = char_array_3[2] & 0x3f;

				for (i = 0; (i <4) ; i++)
					ret += this.base64Chars.charAt(char_array_4[i]);
				i = 0;
			}
		}

		if (i)
		{
			for (j = i; j < 3; j++)
				char_array_3[j] = 0;

			char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
			char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
			char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
			char_array_4[3] = char_array_3[2] & 0x3f;

			for (j = 0; (j < i + 1); j++)
				ret += this.base64Chars.charAt(char_array_4[j]);

			while ((i++ < 3))
				ret += '=';
      }
	return ret;
	},
	Create_evidence: function(jfrog_platform_url, jfrog_evidence_pkey, jfrog_keyid, jfrog_bearer, evidence_subject, evidence_payload) {
		// 1: get base64 of payload
		base64evidence_payload = this.GetBase64EncodedStr(evidence_payload);
		//gs.info('base64evidence_payload='+base64evidence_payload);
		// 2. create and sign PAE
		const payloadType = 'application/vnd.in-toto+json';
		const pae='DSSEv1 ' + payloadType.length + ' '+payloadType + ' ' + evidence_payload.length+' '+evidence_payload;
		const hashAlg = 'sha256';

		//CryptoJS signing process
		var rsa = new RSAKey();
		if (!rsa ) {return "rsa was null";}
		rsa.readPrivateKeyFromPEMString(jfrog_evidence_pkey);
		var hSig = rsa.sign(pae, hashAlg);
		//gs.info('hSig='+hSig);
		if (!hSig ) {return "hSig was null";}
		signed_based_pae = this.HexToBase64(hSig);
		//gs.info('signed_based_pae='+signed_based_pae);
		// 3. evidence creation
		var create_evidence = new sn_ws.RESTMessageV2('x_1560608_jfrog_1.JFrog_evidence', 'create_evidence');
		var create_evidence_endpoint = jfrog_platform_url+'/evidence/api/v1/subject/'+evidence_subject;
		//gs.info('create_evidence_endpoint='+create_evidence_endpoint);
		// override dsse envelope content
		create_evidence.setEndpoint(create_evidence_endpoint);
		create_evidence.setStringParameterNoEscape('payload',base64evidence_payload);
		create_evidence.setStringParameterNoEscape('keyid',jfrog_keyid);
		create_evidence.setStringParameterNoEscape('signature',signed_based_pae);
		create_evidence.setRequestHeader('Authorization','Bearer '+jfrog_bearer);
		var create_evidence_response = create_evidence.execute();
		var create_evidence_response_body = create_evidence_response.getBody();
		var create_evidence_http_status = create_evidence_response.getStatusCode();
		create_evidence_response_obj = JSON.parse(create_evidence_response_body);
		var status = (create_evidence_http_status== "201" );
		return {
			success: status,
			http_status: create_evidence_http_status,
			response_obj: create_evidence_response_obj
			};
    },
    type: 'JFrogEvidenceOperations'
};