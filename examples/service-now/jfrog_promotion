(function executeRule(current, previous /*null when async*/) {
	/*
	this function handles promotion of release bundle v2 and creates an evidence
	the function requires set properties of:
	x_1560608_jfrog_1.jfrog_platform_url
	x_1560608_jfrog_1.promotion-evidence-template
	x_1560608_jfrog_1.jfrog_evidence_pkey
	x_1560608_jfrog_1.jfrog_bearer //password2
	x_1560608_jfrog_1.JFrog_evidence_keyid

	this script assumes that the current record is a change request of a custom type release promotion that has a few extra jfrog related data elements, such as: jfrog project key, release name and number and target promotion environment
	*/

	let jfrog_bearer = gs.getProperty('x_1560608_jfrog_1.jfrog_bearer');
	let jfrog_platform_url = gs.getProperty('x_1560608_jfrog_1.jfrog_platform_url');

	release_operations = new x_1560608_jfrog_1.JFrogReleaseOperations(jfrog_platform_url,jfrog_bearer );
	evidence_operations = new x_1560608_jfrog_1.JFrogEvidenceOperations();
	var promotion_result ='';

	try {
		var promote = true;
		gs.info("Will promote "+ current.number + " with realease "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " and project " + current.jfrog_project);

		// handling project values
		// some endpoints need default as project key, others require empty strings
		var proj_key = current.jfrog_project;
		if (proj_key == 'undefined'){proj_key='default';}
		// rb_repo will be used for api calls with optional project key as part of rbv2 repo
		var rb_repo = '';
		if (proj_key=='default'){
			rb_repo = 'release-bundles-v2/';
		}else {
			rb_repo=proj_key+'-release-bundles-v2/';
		}

		// 1. perform promotion operation -------------
		const promotion_res = release_operations.Promote(current.jfrog_release_name, current.jfrog_release_number, current.env, proj_key);
		promotion_success = promotion_res.promotion_success;
		promotion_http_status = promotion_res.promotion_http_status;
		promotion_response_obj = promotion_res.promotion_response_obj;

		if (promotion_success) {
			promotion_result = 'Promotion done';
			gs.info("Promote of "+ current.number + " with release "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " to env " + current.env + " completed with successful response");

			// set change request state to review
			current.state = 0;

			// evidence creation
			// get release bundle sha256 digest
			const release_info_res = release_operations.Get_release_info( current.jfrog_release_name, current.jfrog_release_number, rb_repo);
			get_release_info_success = release_info_res.get_release_info_success;
			get_release_info_httpStatus = release_info_res.get_release_info_httpStatus;
			get_release_info_responseObj = release_info_res.get_release_info_responseObj;

			if (!get_release_info_success || ! get_release_info_responseObj || !get_release_info_responseObj.checksums ||  !get_release_info_responseObj.checksums.sha256) {
				// handle response errors
				var info_res_message = "NA";
				if (get_release_info_responseObj && get_release_info_responseObj.errors && get_release_info_responseObj.errors[0] && get_release_info_responseObj.errors[0].message){
					info_res_message=get_release_info_responseObj.errors[0].message;
				}
				gs.error("Promote of "+ current.number + " with realease "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " to env " + current.env + " evidence creation failed during RB get checksum with status=" +get_release_info_httpStatus + " and error="+ info_res_message);
				promotion_result+=' Failed getting release bundle checksum, so evidence is not created, check the application logs for more information';
			}else {
				//extract the rb digest for the evidence
				var sha256 = get_release_info_responseObj.checksums.sha256;

				// get evidence payload template and key properties
				let evidence_payload = gs.getProperty('x_1560608_jfrog_1.promotion-evidence-template');
				let jfrog_evidence_pkey = gs.getProperty('x_1560608_jfrog_1.jfrog_evidence_pkey');
				let jfrog_keyid = gs.getProperty('x_1560608_jfrog_1.JFrog_evidence_keyid');
				if (!jfrog_keyid) {jfrog_keyid='';} // jfrog keyid is not mandatory, if not provided, the evidence is not verified on jfrog platform side

				if (!evidence_payload || !jfrog_evidence_pkey || !jfrog_bearer){
					gs.error("Promote of "+ current.number + " with release "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " to env " + current.env + " evidence creation failed due to missing system properties: x_1560608_jfrog_1.promotion-evidence-template, x_1560608_jfrog_1.jfrog_evidence_pkey, x_1560608_jfrog_1.jfrog_bearer");
					promotion_result+=', evidence creation failed due to missing evidence template, private key or jfrog_bearer, check application logs for more information';
				} else {
					// craft predicate payload from template
					evidence_payload = evidence_payload.replaceAll("$digest",sha256 );
					evidence_payload = evidence_payload.replaceAll("$cr-number",current.number);
					evidence_payload = evidence_payload.replaceAll("$release-name",current.jfrog_release_name);
					evidence_payload = evidence_payload.replaceAll("$release-version",current.jfrog_release_number);
					evidence_payload = evidence_payload.replaceAll("$target-environment",current.env);
					evidence_payload = evidence_payload.replaceAll("$target-environment",current.env);
					var gdt = new GlideDateTime();
					var isoFormat = gdt.getValue().replace(" ", "T") + ".000Z"; // Convert to ISO 8601 format
					evidence_payload = evidence_payload.replaceAll("$timestamp",isoFormat);
					evidence_payload = evidence_payload.replaceAll("$createdtimestamp",isoFormat);
					gs.info('evidence_payload='+evidence_payload);
					var evidence_subject = rb_repo+current.jfrog_release_name+"/"+current.jfrog_release_number+"/release-bundle.json.evd";

					// create evidence
					const evidence_result = evidence_operations.Create_evidence(jfrog_platform_url, jfrog_evidence_pkey, jfrog_keyid, jfrog_bearer, evidence_subject, evidence_payload);
					success = evidence_result.success;
					http_status = evidence_result.http_status;
					response_obj = evidence_result.response_obj;

					if (!success ){
						// evidence creation failed
						promotion_result+= ', Evidence creation failure, check application logs for more information';
						var create_evidence_res_message = "NA";
						if (response_obj && response_obj.errors && response_obj.errors[0] && response_obj.errors[0].message){
							create_evidence_res_message=response_obj.errors[0].message;
						}
						gs.error("evidence creation failed with status=" + http_status + " and error="+ create_evidence_res_message);
					} else {
						// evidence created
						gs.info('evidence creation was successful');
						if (response_obj && response_obj.uri ){
							current.jfrog_promotion_evidence = gs.getProperty('x_1560608_jfrog_1.jfrog_platform_url')+'/artifactory/'+response_obj.uri;
						}
						promotion_result+= ', Evidence Created';
					}
				}
			}
		} else {
			// extract promotion response message
			var res_message = "NA";
			if (promotion_response_obj && promotion_response_obj.errors && promotion_response_obj.errors[0] && promotion_response_obj.errors[0].message){
				res_message=promotion_response_obj.errors[0].message;
			}
			gs.error("Promote of "+ current.number + " with release "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " to env " + current.env + " FAILED response= " + res_message);
			// send error notification
			gs.eventQueue('x_1560608_jfrog_1.jfrog_act_event', current, res_message);
			// log notification sending
			gs.info('promotion failure, error event fired: x_1560608_jfrog_1.jfrog_act_event' );

			// updating the request with the result failure
			current.promotion_result = 'Promotion Failed with message: '+res_message;
		}
	}catch(ex) {
		gs.error("Promote of "+ current.number + " with release "+ current.jfrog_release_name + ":" + current.jfrog_release_number + " to env " + current.env + " failed with exception: " + ex.message );
		// send error notification, comment out if not needed or if notification and event components were not created
		gs.eventQueue('x_1560608_jfrog_1.jfrog_act_event', current, 'Exception: '+ex.message );
		// log notification sending
		gs.info('promotion failure, error event fired: x_1560608_jfrog_1.jfrog_act_event' );

		// not sure this is helpful
		current.state.setError('Promotion operation failed with exception ' + ex.message) ;
		// updating the request with the result failure
		current.promotion_result += ', Promotion flow issues, Exception: '+ex.message;

	}
	// updating current record
	current.promotion_result = promotion_result;
	//gs.info('promotion completed, updating current record' );
	current.setWorkflow(false);
	current.update();
	current.setWorkflow(true);

})(current, previous);