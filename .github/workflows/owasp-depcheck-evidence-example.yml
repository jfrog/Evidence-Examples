name: "Dependency Check with Evidence Integration"
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  REGISTRY_DOMAIN: ${{ vars.JF_URL }}
  REPO_NAME: 'maven-depcheck-local'
  PACKAGE_NAME: 'simple-java-depcheck'
  VERSION: ${{ github.run_number }}
  BUILD_NAME: 'depcheck-maven-build'
  ATTACH_OPTIONAL_CUSTOM_MARKDOWN_TO_EVIDENCE: true

jobs:
  package-java-project-with-depcheck-evidence:
    runs-on: ubuntu-latest
    steps:
      # Setup JFrog CLI
      - name: Setup jfrog cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build and publish the Java package to JFrog Artifactory
      - name: Build and publish Java package to Artifactory
        run: |
          cd examples/depcheck/src
          mvn clean compile
          mvn package
          echo "Deploying package to Artifactory"
          jf rt upload target/*.jar $REPO_NAME/$PACKAGE_NAME/$VERSION/ --build-name=$BUILD_NAME --build-number=${{ github.run_number }}
          echo "Publishing build info"
          jf rt build-publish $BUILD_NAME ${{ github.run_number }}

      - name: Dependency Check Scan
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          # actions/setup-java@v1 changes JAVA_HOME so it needs to be reset to match the depcheck image
          JAVA_HOME: /opt/jdk
        with:
          project: '${{ env.PACKAGE_NAME }}'
          format: 'JSON'
          path: examples/depcheck/src/target
          out: ${{ github.workspace }}/reports
          args: >
            --noupdate
      
      # This is an optional step to generate a custom markdown report
      - name: Generate optional custom markdown report
        if: env.ATTACH_OPTIONAL_CUSTOM_MARKDOWN_TO_EVIDENCE == 'true'
        run: |
          cd ${{ github.workspace }}
          if [ -f "reports/dependency-check-report.json" ]; then
            python examples/depcheck/scripts/markdown-converter.py reports/dependency-check-report.json
            echo "Custom markdown report generated"
          else
            echo "Warning: dependency-check-report.json not found"
            exit 1
          fi
    
      # Attaching the evidence to associated build
      - name: Attach evidence to associated build
        run: |
         jf evd create \
            --build-name $BUILD_NAME \
            --build-number ${{ github.run_number }} \
            --key "${{ secrets.PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" \
            --predicate ./reports/dependency-check-report.json \
            --predicate-type https://owasp.org/dependency-check \
            ${{ env.ATTACH_OPTIONAL_CUSTOM_MARKDOWN_TO_EVIDENCE == 'true' && '--markdown "dependency-check-report.md"' || '' }}